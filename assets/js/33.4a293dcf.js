(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{351:function(t,s,a){"use strict";a.r(s);var r=a(25),e=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"栈和队列基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈和队列基础"}},[t._v("#")]),t._v(" 👉 栈和队列基础")]),t._v(" "),s("h2",{attrs:{id:"栈-后进先出-只用-push-和-pop-完成增删的-数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈-后进先出-只用-push-和-pop-完成增删的-数组"}},[t._v("#")]),t._v(" 栈 - 后进先出，只用 push 和 pop 完成增删的“数组”")]),t._v(" "),s("p",[t._v("栈，后进先出，只允许从尾部操作，从尾部增加/删除，因此只能通过 push / pop 完成增删。")]),t._v(" "),s("p",[t._v("栈元素出栈时，要取的是栈顶元素，栈顶元素指的就是数组尾部的元素。")]),t._v(" "),s("h3",{attrs:{id:"栈的应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈的应用"}},[t._v("#")]),t._v(" 栈的应用")]),t._v(" "),s("h4",{attrs:{id:"括号问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#括号问题"}},[t._v("#")]),t._v(" 括号问题")]),t._v(" "),s("h4",{attrs:{id:"递减栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#递减栈"}},[t._v("#")]),t._v(" 递减栈")]),t._v(" "),s("p",[t._v("通过递减栈，计时出栈不必要数据，可帮助避免重复操作。")]),t._v(" "),s("h4",{attrs:{id:"相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关"}},[t._v("#")]),t._v(" 相关")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/min-stack/",target:"_blank",rel:"noopener noreferrer"}},[t._v("155. 最小栈"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/implement-queue-using-stacks/",target:"_blank",rel:"noopener noreferrer"}},[t._v("232. 用栈实现队列"),s("OutboundLink")],1)])])]),t._v(" "),s("h2",{attrs:{id:"队列-先进先出-只用-push-和-shift-完成增删的-数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列-先进先出-只用-push-和-shift-完成增删的-数组"}},[t._v("#")]),t._v(" 队列 - 先进先出，只用 push 和 shift 完成增删的“数组”")]),t._v(" "),s("p",[t._v("栈，先进先出，只允许从尾部增加和从头部移除，因此只能通过 push / shift 完成增删。")]),t._v(" "),s("p",[t._v("队列元素出队时，要取的是队头元素，队头元素指的是数组的第一个元素。")])])}),[],!1,null,null,null);s.default=e.exports}}]);